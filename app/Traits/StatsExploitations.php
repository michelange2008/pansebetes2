<?php

namespace App\Traits;

use Illuminate\Support\Facades\DB;

/**
 * Produit les données pour les graphiques de synthèse des exploitations
 * @see StatsController@exploitations
 */
trait StatsExploitations
{
    use Histogramme, LitCsv;
    /**
     * Type de productions
     *
     * Renvoie un array d'array avec les espèces (vaches laitières, vache allaitante, brebis all..)
     * les nombre de troupeaux pour chaque espèce ainsi que les éléments de titre et de tooltip
     * pour le graphique
     *
     * @return json
     **/
    public function typesProductions()
    {
        // Récupère les troupeaux ayant un panse-bête en réduisant par éleveur
        // (car pour un éleveur, il peut y avoir plusieurs panses-bêtes pour un seul troupeau)
        $nb_exploitations_espece = DB::table('saisies')
            ->join('users', 'users.id', 'saisies.user_id')
            ->join('especes', 'especes.id', 'saisies.espece_id')
            ->select('users.id as eleveur', 'especes.nom as espece')
            ->groupBy('especes.nom', 'users.id')
            ->get()->countBy('espece')->sortDesc();

        // Construit l'array d'entrée en faisant un array avec les espèces
        // un array avec le nombre de troupeaux et en calculant le total du
        // nombre de troupeaux
        $troupeaux = 0;
        foreach ($nb_exploitations_espece as $espece => $total) {
            $types_production['especes'][] = $espece;
            $types_production['totaux'][] = $total;
            $troupeaux += $total;
        }
        $types_production['total'] = $troupeaux;
        // Ajoute les éléments de titre
        $types_production['title'] = "Types de productions";
        $types_production['xAxisTitle'] = "Nombre de troupeaux";
        $types_production['serieName'] = "Troupeaux";

        return json_encode($types_production);
    }

    /**
     * Taille des exploitations sur la base de la SAU (ha)
     *
     * Renvoie un json avec les éléments pour afficher un histogramme
     * de fréquence en fonction de la taille des exploitations 
     *
     * @return json
     **/
    public function SAUexploitations()
    {
        $datas = DB::table('paraferme_user')
            ->join('parafermes', 'parafermes.id', 'paraferme_user.paraferme_id')
            ->where('parafermes.nom', 'sau')
            ->select('value');

        $saus = $datas->pluck('value')->map(function (string $item, int $key) { // Convertit les surface de string en integer
            return intval($item);
        })->toArray();
        // Récupère les infos pour les seuils de l'histogramme dans un fichier csv
        $seuils = $this->litCsvKeyFirstCol("csv/seuilsSAU.csv");
        // Utilise le trait histogramme pour récupérer un tableau associatif avec les tranches et les effectifs par tranche
        $saus_histo = $this->histogramme_absolu($saus, $seuils);
        // Complète le tableau pour le dessin de l'histogramme
        $sau_exploitations['xCategories'] = array_keys($saus_histo);
        $sau_exploitations['serie'] = array_values($saus_histo);

        $sau_exploitations['total'] = $datas->count();
        $sau_exploitations['title'] = "Taille des exploitations (SAU en ha)";
        $sau_exploitations['yAxisTitle'] = "Nombre d'exploitations";

        return json_encode($sau_exploitations);
    }

    /**
     * Graphique sur signe de qualité
     *
     *
     * @return json $signes_qualite
     **/
    public function signesQualites() : string
    {
        $datas = DB::table('paraferme_user')
            ->join('parafermes', 'parafermes.id', 'paraferme_user.paraferme_id')
            ->where('parafermes.nom', 'Signes de qualité')
            ->select('value')->pluck('value')->countBy();
        foreach ($datas as $signe => $effectif) {
            $signes_qualite['datas'][] = [$signe, $effectif];
        }
        $signes_qualite['title'] = "Exploitations sous signe de qualité";

        return json_encode($signes_qualite);
    }

    /**
     * Permet de dessiner un histogramme en UTH
     *
     * @return json
     **/
    public function uth()
    {
        $datas = DB::table('paraferme_user')
        ->join('parafermes', 'parafermes.id', 'paraferme_user.paraferme_id')
        ->where('parafermes.nom', 'UTH')
        ->select('value');

        $seuils = [
            4 => "Plus de 4 UTH",
            3 => "3,1 à 4 UTH",
            2 => "2,1 à 3 UTH",
            1 => "1,1 à 2 UTH",
            0 => "1 UTH",
        ];

        $uths = $this->histogramme_absolu($datas->pluck('value')->toArray(), $seuils);

        $uth_exploitations['xCategories'] = array_keys($uths);
        $uth_exploitations['serie'] = array_values($uths);
        $uth_exploitations['total'] = $datas->count();
        $uth_exploitations['title'] = "Nombre d'UTH";
        $uth_exploitations['yAxisTitle'] = "Nombre d'exploitations";

        return json_encode($uth_exploitations);
    }
}
